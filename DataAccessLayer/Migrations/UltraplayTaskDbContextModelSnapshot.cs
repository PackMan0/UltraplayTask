// <auto-generated />
using System;
using DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(UltraplayTaskDbContext))]
    partial class UltraplayTaskDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AbstractionProvider.Models.Bet", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ExternalID");

                    b.Property<bool>("IsLive");

                    b.Property<int>("MatchExternalID");

                    b.Property<Guid>("MatchID");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.HasIndex("MatchID");

                    b.ToTable("Bets");
                });

            modelBuilder.Entity("AbstractionProvider.Models.Event", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryID");

                    b.Property<int>("ExternalID");

                    b.Property<bool>("IsLive");

                    b.Property<string>("Name");

                    b.Property<int>("SportExternaID");

                    b.Property<Guid>("SportID");

                    b.HasKey("ID");

                    b.HasIndex("SportID");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("AbstractionProvider.Models.Match", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EventExtarnalID");

                    b.Property<Guid>("EventID");

                    b.Property<int>("ExternalID");

                    b.Property<string>("MatchType");

                    b.Property<string>("Name");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("ID");

                    b.HasIndex("EventID");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("AbstractionProvider.Models.Odd", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BetExtarnalID");

                    b.Property<Guid>("BetID");

                    b.Property<int>("ExternalID");

                    b.Property<string>("Name");

                    b.Property<double>("SpecialBetValue");

                    b.Property<double>("Value");

                    b.HasKey("ID");

                    b.HasIndex("BetID");

                    b.ToTable("Odds");
                });

            modelBuilder.Entity("AbstractionProvider.Models.Sport", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ExternalID");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Sports");
                });

            modelBuilder.Entity("AbstractionProvider.Models.Bet", b =>
                {
                    b.HasOne("AbstractionProvider.Models.Match", "Match")
                        .WithMany("Bets")
                        .HasForeignKey("MatchID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AbstractionProvider.Models.Event", b =>
                {
                    b.HasOne("AbstractionProvider.Models.Sport", "Sport")
                        .WithMany("Events")
                        .HasForeignKey("SportID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AbstractionProvider.Models.Match", b =>
                {
                    b.HasOne("AbstractionProvider.Models.Event", "Event")
                        .WithMany("Matches")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AbstractionProvider.Models.Odd", b =>
                {
                    b.HasOne("AbstractionProvider.Models.Bet", "Bet")
                        .WithMany("Odds")
                        .HasForeignKey("BetID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
